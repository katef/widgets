/* $Id$ */

$menu-padding ?= 1.25em;

body {
	margin:  0;
	padding: 0;

	clearfix();

	// respond when the page height is over 20 lines
	// only when not using a collapsed (vertical) menu
	$q = "all and (min-height: " + ($baseline * 20) + ")";
	@media $q {
		for $l in 0 .. length($grid.ncols) - 1 {
			$q = grid-breakpoint($grid, $l);
			@media $q {
				if ($grid.ncols[$l] > 2) {
					padding-top:    ($baseline * 1.5);
					padding-bottom: ($baseline * 3);
				}
			}
		}
	}
}

header {
	h1 {
		display: none;
	}

	menu {
		line-height: ($baseline * 2);
    	list-style-type: none;
		text-align: center;

		margin:  0;
		padding: 0;

		li {
			margin:  0;
			padding: 0;

			a {
				display: inline-block;
				height: 100%;
			}
		}
	}

	for $l in 0 .. length($grid.ncols) - 1 {
		$q = grid-breakpoint($grid, $l);
		@media $q {
			if ($grid.ncols[$l] <= 2) {
				position: relative; // for menu

				menu {
width: 100%;
					position: absolute;
					bottom: 0;
/*
					left:  20%;
					right: auto;
					width: 9em;
					max-width: ($grid.colwidth * 2);
*/
					margin: 0 auto;
				}

				li {
					display: inline-block;
					float: left;

					if ($grid.ncols[$l] > 1) {
						width: 25%;
					} else {
						width: 50%;
					}
				}

				a {
					width: 100%;
				}
			} else {
				li {
					display: inline-block;
				}

				a {
					padding: 0 $menu-padding;
				}
			}
		}
	}
}

footer {
	display: none; /* XXX */
}

section.page {
	margin-top:    ($baseline * 1);
	margin-bottom: ($baseline * 1);

	*:last-child {
		margin-bottom: 0;
	}

	h2 {
		padding-top: ceil($baseline * 0.0);
		font-size:       2em;
		line-height:     ($baseline * 1.0);
	}

	dl.index dd {
		margin-left: 0;
	}

	section.archive-year[data-count = "0"] {
		display: none;
	}

	section.archive-year > ol {
		list-style-type: none;
	}

	section.archive-year {
		& > h1 {
			&:after {
				content: " ";
			}

			a {
				display: none;
			}
		}
	}

	article.entry {
		time.update,
		a[name],
		ul.tags {
			display:    block;
			position:   relative;
			margin-top: ($baseline * 1);
		}
	}

	for $l in 0 .. length($grid.ncols) - 1 {
		$q = grid-breakpoint($grid, $l);
		@media $q {

			if ($grid.ncols[$l] <= 4) {
				grid-column($grid, $l, $grid.ncols[$l]);
			} else {
				grid-column($grid, $l, $grid.ncols[$l] - 1, 1);
			}

		}
	}

}

nav#monthindex {
	display: block;
	margin-top:    ($baseline * 1);
	margin-bottom: ($baseline * 1);

	font-size: .9em;

	ol.pages {
		float: left;
	}

	& > a {
		float: right;
	}

	for $l in 0 .. length($grid.ncols) - 1 {
		$q = grid-breakpoint($grid, $l);
		@media $q {

			// TODO: could animate collapsing by transitioning on width to 0
			// when too narrow to fit the attr() months
			if ($grid.ncols[$l] == 1) {
				pages-collapse-group(false);
			}

			// when too narrow to fit all 12 months explicitly
			if ($grid.ncols[$l] >= 2 && $grid.ncols[$l] <= 5) {
				pages-collapse-group(data-fmt);
			}

			if ($grid.ncols[$l] <= 2) {
				& > a,
				ol.pages {
					text-align: center;
				}

				& > a {
					margin-top: 2ex; // XXX: hacky
				}
			}
		}
	}
}

nav#sidebar {
	display: none;

	table.calendar {
		table-layout: fixed;

		max-width:   (12 * $baseline);
		margin-left: (6  * $baseline);
		width: 100%;

		/* TODO: mixin? */
		border-spacing: 0 ! important;
		border-collapse: collapse ! important;
	}

	ol.years {
		display: none;
		float: left;
		margin-left:   $gutter;
		margin-bottom: $gutter;
	}
}

nav.pages {
	padding-top:    ($baseline * 1);
	padding-bottom: ($baseline * 4);
}

pre {
	overflow-y: auto;
}

for $l in 0 .. length($grid.ncols) - 1 {
	$q = grid-breakpoint($grid, $l);
	@media $q {
		body {
			grid-container($grid, $l);
		}

		if ($grid.ncols[$l] > 2) {
			br.rbr {
				display: none;
			}
		}

		if ($grid.ncols[$l] == 5) {
			figure {
//				grid-subcontainer($grid, $l, $grid.ncols[$l] - 1, 1);
//				$subgrid = ( 2 ) ( fluid ) ( center ) $colwidth $gutter $fixed-margin $fluid-margin;


				a:hover img {
//					border-color: #000;
				}

				img {
//					width: 100%;

//					border: solid 1px #ccc;
					&:first-child {
//						padding-left:  0 \! important; // hack
					}

					&:last-child {
//						padding-right: 0 \! important; // hack
					}
				}

				&.double img {
//					grid-column($subgrid, 0, 1);
				}

				&.single-narrow img {
//					grid-column($subgrid, 0, 2);
					img {
						width: 80%;
					}
				}

				&.single-wide img {
//					grid-column($subgrid, 0, 2);
				}
			}
		}

		if ($grid.ncols[$l] <= 2) {
			header {
//				grid-column($grid, $l, $grid.ncols[$l]);
			}

			section.page {
//				grid-column($grid, $l, $grid.ncols[$l]);
			}

			dl.index {
//				grid-subcontainer($grid, $l, $grid.ncols[$l], 0);

				dt a {
//					grid-column($grid, $l, 1);
				}

				dd {
//					grid-column($grid, $l, 1);
				}
			}

			nav#monthindex {
//				grid-subcontainer($grid, $l, $grid.ncols[$l], 0);
//				$subgrid = grid-subgrid($grid, $l, 0);

				ol.pages,
				& > a {
//					grid-column($subgrid, $l, $grid.ncols[$l]);
				}
			}
		}

		if ($grid.ncols[$l] >= 2) {
			nav#monthindex {
				pages-collapse-outer(data-fmt);
			}
		}

		if ($grid.ncols[$l] >= 4) {
			header {
//				grid-column($grid, $l, $grid.ncols[$l] - 1, 1);
			}

			dl.index {
//				grid-subcontainer($grid, $l, $grid.ncols[$l] - 1, 0);
//				$subgrid = grid-subgrid($grid, $l, 1);
//				$subcols = $subgrid[0];

				dt a {
//					grid-column($subgrid, $l, 1);
				}

				dd {
//					grid-column($subgrid, $l, $subcols[$l] - 1);
				}
			}

			section.page > article.entry {
//				grid-subcontainer($grid, $l, $grid.ncols[$l], 0);
//				$subgrid = grid-subgrid($grid, $l, 0);

				& > time.update,
				& > a[name],
				& > ul.tags {
//					grid-column($subgrid, $l, 1);
				}

				& > div.body {
//					grid-column($subgrid, $l, $grid.ncols[$l] - 1);
				}
			}

			nav#monthindex {
//				grid-subcontainer($grid, $l, $grid.ncols[$l] - 1, 1);
//				$subgrid = grid-subgrid($grid, $l, 1);

				ol.pages {
//					grid-column($subgrid, $l, $grid.ncols[$l] - 2);
				}

				& > a {
//					grid-column($subgrid, $l, 1);
					text-align: center;
				}
			}
		}

		if ($grid.ncols[$l] >= 5) {
			header {
//				grid-column($grid, $l, 3, 1);
			}
		}
	}
}

