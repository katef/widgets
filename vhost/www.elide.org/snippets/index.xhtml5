<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html [
	<!ENTITY gcd   '<abbr title="Greatest Common Denominator">GCD</abbr>'>
	<!ENTITY lcm   '<abbr title="Lowest Common Multiple">LCM</abbr>'>
	<!ENTITY uri   '<abbr title="Uniform Resource Identifier">URI</abbr>'>
	<!ENTITY url   '<abbr title="Uniform Resource Locator">URL</abbr>'>
	<!ENTITY dom   '<abbr title="Document Object Model">DOM</abbr>'>
	<!ENTITY css   '<abbr title="Cascading Style Sheets">CSS</abbr>'>
	<!ENTITY uri   '<abbr title="Uniform Resource Indicator">URI</abbr>'>
	<!ENTITY oid   '<abbr title="Object Identifier">OID</abbr>'>
	<!ENTITY csv   '<abbr title="Comma-Separated Values">CSV</abbr>'>
	<!ENTITY rfc   '<abbr title="Request For Comments">RFC</abbr>'>
	<!ENTITY fsm   '<abbr title="Finite State Machine">FSM</abbr>'>
	<!ENTITY xhtml '<abbr title="Extensible Hypertext Markup Language">XHTML</abbr>'>

	<!ENTITY c       '<abbr>C</abbr>'>
	<!ENTITY c99     '<abbr>C99</abbr>'>
	<!ENTITY plpgsql '<abbr>PL/</abbr>pg<abbr>SQL</abbr>'>
]>

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
	<head>
		<title>Programming Snippets</title>

		<meta name="description" content="Kate's Programming Snippets"/>
		<meta name="keywords"    content="kate,programming,snippets"/>
		<meta name="rcsid"       content="$Id$"/>
	</head>

	<body>
		<p>Some fragments of programs. Some of these I use as a sort of
			template to modify, which I keep around to remind me how I
			did something.</p>

		<dl class="index">
			<dt><a href="comment.c"><code>comment.c</code></a></dt>
			<dd>
				<p>Identifying partial lines with
					<code>fgets()</code>.</p>
			</dd>

			<dt><a href="xstrrep.c"><code>xstrrep.c</code></a></dt>
			<dd>
				<p>In response to the stock reply <q>it takes five
					minutes to write your own</q>. It took me the best part
					of a day.</p>
			</dd>

			<dt><a href="substr.c"><code>substr.c</code></a></dt>
			<dd>
				<p>Substrings using either absolute offsets, or a start and a
					length. Negative ranges are permitted.</p>
			</dd>

			<dt><a href="trim.c"><code>trim.c</code></a></dt>
			<dd>
				<p>Trimming whitespace.</p>
			</dd>

			<dt><a href="lcm.c"><code>lcm.c</code></a></dt>
			<dd>
				<p>The &lcm; and &gcd; of two numbers.</p>
			</dd>

			<dt><a href="log.c"><code>log.c</code></a></dt>
			<dd>
				<p>Things related to logarithms. These are the sorts
					of things I am bad at getting right.</p>
			</dd>

			<dt><a href="bits.c"><code>bits.c</code></a></dt>
			<dd>
				<p>Dealing with bits, which I am also bad at getting right.</p>
			</dd>

			<dt><a href="temp.sql"><code>temp.sql</code></a></dt>
			<dd>
				<p>Support routines for creating temporary tables in
					&plpgsql;, with their &oid; being cached.</p>
			</dd>

			<dt><a href="sprintf.sql"><code>sprintf.sql</code></a></dt>
			<dd>
				<p>A minimal <code>sprintf()</code> for &plpgsql;.</p>
			</dd>

			<dt><a href="xmalloc.c"><code>xmalloc.c</code></a></dt>
			<dd>
				<p><code>xmalloc()</code> and friends.</p>
			</dd>

			<dt><a href="dburi.c"><code>dburi.c</code></a></dt>
			<dd>
				<p>Database &uri; parsing for
					<a href="http://libdbi.sourceforge.net/">libdbi</a>,
					written in &c99;.  This provides a &uri; scheme similar to
					<a href="http://trac.edgewall.org/wiki/TracEnvironment#DatabaseConnectionStrings">Trac's Database Connection Strings</a>.
					Its <a href="dburitest.c">unit tests</a> are separate.</p>
			</dd>

			<dt><a href="regrep.c"><code>regrep.c</code></a></dt>
			<dd>
				<p>Substitute arrays of <code>regmatch_t</code> matches into
					a formatting string.</p>
			</dd>

			<dt><a href="signal.c"><code>signal.c</code></a></dt>
			<dd>
				<p>Fork a child and catch signals sent from the child to its
					parent.</p>
			</dd>

			<dt><a href="tok.c"><code>tok.c</code></a></dt>
			<dd>
				<p>Various forms of push-driven tokenisation.</p>
			</dd>

			<dt><a href="csv.c"><code>csv.c</code></a></dt>
			<dd>
				<p><a href="http://en.wikipedia.org/wiki/Comma-separated_values">&csv;</a>
					parsing as per
					<a href="http://tools.ietf.org/html/rfc4180">&rfc; 4180</a>.
					Here's the <a href="csv.png">&fsm; as a diagram</a>. Some
					states are duplicated in the code for ease of output; the
					grammar is equivalent.</p>
			</dd>

			<dt><a href="css.js"><code>css.js</code></a></dt>
			<dd>
				<p>Javascript &dom; manipulation for &css; classes in &xhtml;.</p>
			</dd>

			<dt><a href="events.js"><code>events.js</code></a></dt>
			<dd>
				<p>Javascript &dom; event manipulation.</p>
			</dd>

			<dt><a href="urlalloc.c"><code>urlalloc.c</code></a></dt>
			<dd>
				<p>A particularly brutal implementation of &url; parsing.</p>
			</dd>

			<dt><a href="unescape.c"><code>unescape.c</code></a></dt>
			<dd>
				<p>Resolving &c;-style escape sequences for strings.<!--
					It's tricky to find a good balance between modularity and
					complexity of interface here.--></p>
			</dd>

			<dt><a href="args.c"><code>args.c</code></a></dt>
			<dd>
				<p>Argument parsing to produce <code>argv[]</code>.
					I found this difficult to do neatly.</p>
			</dd>

<!--
			<dt rowspan="2"><a href="args.c"><code>args.c</code></a></dt>
			<dd>Argument parsing to produce a <code>NULL</code>-terminated
				<code>argv</code> array suitable for use with
				<code>execve()</code> and similar.
				This came out far more complex than I would have liked.</dd>

			<dd>The syntax is similar to <code>sh</code> commands.
				Whitespace separates arguments.
				Each argument consists of one or more single-quoted,
				double-quoted or unquoted strings.
				These concatenate.
				Unquoted and double-quoted strings may contain &c;-style
				escapes.</dd>
-->
		</dl>

		<p>And some fragments of things:</p>

		<dl class="index">
			<dt><a href="bits/">Bit Twiddling</a></dt>
			<dd>
				<p>My collection of little bit-related things, which I can
					never figure out very easily on the spot.</p>
			</dd>
		</dl>

	</body>
</html>

