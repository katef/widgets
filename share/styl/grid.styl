/*
 * This grid system has the principle that columns are imagined to be a fixed width,
 * that width determines how many columns maximum would fit into the current media.
 *
 * The idea is that designers design layouts to suit various numbers of columns.
 *
 * Responsive design is provided by selecting between those layouts as the media
 * width changes. Any given layout may be either fluid or fixed-width.
 *
 * Anatomy of a layout:
 *
 *   ├─────────────────────────── parent ────────────────────────┤
 *   ╎    ├──────────────────── container ───────────────────┤   ╎
 *   │    ╎            ├┤ gutter                             ╎   │
 *   │    ░░▒▒▒▒▒▒▒▒▒░░░░▒▒▒▒▒▒▒▒▒░░░░▒▒▒▒▒▒▒▒▒░░░░▒▒▒▒▒▒▒▒▒░░   │
 *   │    ░░▒▒▒▒▒▒▒▒▒░░░░▒▒▒▒▒▒▒▒▒░░░░▒▒▒▒▒▒▒▒▒░░░░▒▒▒▒▒▒▒▒▒░░   │
 *   │    ░░▒▒▒▒▒▒▒▒▒░░░░▒▒▒▒▒▒▒▒▒░░░░▒▒▒▒▒▒▒▒▒░░░░▒▒▒▒▒▒▒▒▒░░   │
 *   │    ░░▒▒▒▒▒▒▒▒▒░░░░▒▒▒▒▒▒▒▒▒░░░░▒▒▒▒▒▒▒▒▒░░░░▒▒▒▒▒▒▒▒▒░░   │
 *   ╎   ╎             ├───────────┤ column                      │
 *   ├───┤ margin                                                │
 *
 * There are also sub-containers, which are columns containing other columns.
 * Those make life easier for heirachical markup.
 *
 * Per-layout variables:
 *
 *   $grid.ncols  [$l]  Number of columns for layout $l
 *   $grid.layouts[$l]  Column strategy for layout $l (fixed or fluid)
 *   $grid.aligns [$l]  Alignment for layout $l (left, right or center)
 *
 * Global variables:
 *
 *   $grid.colwidth     Column width for fixed layouts
 *   $grid.gutter       Half the width between adjacent columns
 *   $grid.*-margin     Container margin for fixed- and fluid- layouts respectively
 *
 * $grid.colwidth is used to decide if a layout will fit in the container,
 * regardless of whether that layout happens to be fluid or fixed.
 *
 * Units for $grid.colwidth must be suitable for @media min-width (i.e. px or pt,
 * but not em or ex). Units here must match the units for $grid.fixed-margin
 * and $grid.gutter.
 *
 *
 * There are no pre-defined CSS classes to scatter over your markup. Instead, you're
 * expected to call the grid mixins for your relevant elements, for each of the layouts
 * you define.
 *
 * Example:
 *
 *  $grid = {
 *  	ncols:   (     1      2      3      4      6      8     10     12     14     16  )
 *  	layouts: ( fluid  fluid  fluid  fluid  fixed  fixed  fixed  fixed  fixed  fixed  )
 *  	aligns:  ( center center center center center center center center center center )
 *
 *  	colwidth: 100px
 *  	gutter:   18px
 *
 *  	fixed-margin: $gutter * 3 // must be same units as $colwidth
 *  	fluid-margin: $gutter     // must be same units as $colwidth
 *  }
 *
 *  for $l in 0 .. length($grid.ncols) - 1 {
 *  	$q = grid-breakpoint($grid, $l, min);
 *  	@media $q {
 *  		ol {
 *  			grid-container($grid, $l);
 *  		}
 *
 *  		li {
 *  			grid-column($grid, $l);
 *  		}
 *  	}
 *  }
 *
 * Unfortunately I can't hide this stuff inside mixins because Stylus has various bugs
 * in its @media handling. So the loop for breakpoints has to be provided by the user.
 * Sorry about that. I've done my best to minimize the guts exposed.
 *
 * You can have completely different layouts, if you wish. For example, by using
 * conditionals inside the media queries. This works best limiting rules to apply
 * between a specific min-max range by omitting the $m argument for grid-breakpoint():
 *
 *  for $l in 0 .. length($grid.ncols) - 1 {
 *  	$q = grid-breakpoint($grid, $l);
 *  	@media $q {
 *  		if ($ncols[$l] == 1) {
 *  			...
 *  		}
 *
 *  		if ($ncols[$l] >= 2) {
 *  			...
 *  		}
 *  	}
 *  }
 *
 */

/*
 * TODO: have an element be both a container and a column
 * TODO: permit $grid.gutter to be a percentage
 * TODO: permit $grid.colspan to be a percentage
 */

/*
 * XXX: some browsers consider scrollbars part of the mq width; others do not.
 * I think this may be only relevant for fixed width layouts; we can
 * conservatively subtract a convervatively wide scrollbar width for those,
 * and break later as hysteresis.
 */

grid-breakpoint-min($grid, $l) {
	if ($l == 0) {
		return null;
	} else {
		return 2 * $grid.fixed-margin + $grid.ncols[$l] * $grid.colwidth;
	}
}

grid-breakpoint-max($grid, $l) {
	if ($l == length($grid.ncols) - 1) {
		return null;
	} else {
		return 2 * $grid.fixed-margin + $grid.ncols[$l + 1] * $grid.colwidth - 1;
	}
}

grid-breakpoint($grid, $l, $m = both) {
	if ($m == both) {
		$min = grid-breakpoint($grid, $l, min);
		$max = grid-breakpoint($grid, $l, max);

		if ($min == all) {
			return $max;
		}

		if ($max == all) {
			return $min;
		}

		return "%s and %s" % ($min $max);
	}

	/*
 	 * TODO: permitting $grid.fixed-margin as a percentage shouldn't be so hard.
	 * I think it's just 1/percent and not a simultaneous equation.
	 */

	if ($m == min) {
		$width = grid-breakpoint-min($grid, $l);
	} else {
		$width = grid-breakpoint-max($grid, $l);
	}

	if (!$width) {
		return all;
	}

//	p("%s cols: %s = %s, %s" % ($grid.ncols[$l] $m $width $grid.layouts[$l]));

	return "(%s-width: %s)" % ($m $width);
}

grid-container($grid, $l) {
	clearfix();

	if ($grid.layouts[$l] == fixed) {
		width: $grid.ncols[$l] * $grid.colwidth;
	} else {
		width: auto;
	}

	if ($grid.layouts[$l] == fixed) {
		margin-left:  $grid.aligns[$l] == left  ? $grid.fixed-margin : auto;
		margin-right: $grid.aligns[$l] == right ? $grid.fixed-margin : auto;
	} else {
		margin-left:  $grid.aligns[$l] != right ? $grid.fluid-margin : 0;
		margin-right: $grid.aligns[$l] != left  ? $grid.fluid-margin : 0;
	}
}

grid-subgrid($grid, $l, $indent) {
	$subgrid = clone($grid);
	$subgrid[0][$l] = $subgrid[0][$l] - $indent;

	return $subgrid;
}

grid-column($grid, $l, $colspan = 1, $indent = 0) {
	if ($grid.colspan < $grid.ncols[$l]) {
		float: left;
	}

	// TODO: need to work around sub-pixel percentage bugs
	// (e.g. overflow: hidden, and set container to 101%)

	if ($grid.layouts[$l] == fixed) {
		width: ($colspan * $grid.colwidth);
	} else {
		width: ($colspan * 100% / $grid.ncols[$l]);
	}

	box-sizing: border-box;

	// XXX: only if not already set (e.g. for an element being both a column and a container)
	padding-left:  0;
	padding-right: 0;
	margin-left:   0;
	margin-right:  0;

	if ($grid.layouts[$l] == fixed) {
		margin-left: $indent * $grid.colwidth;
	} else {
		margin-left: $indent * (100% / $grid.ncols[$l]);
	}

	// TODO: make an option to fill out to 100% of the container width
	// i.e. to overlap the container's padding. or just elide padding here
	padding-left:  @padding-left  + $grid.gutter;
	padding-right: @padding-right + $grid.gutter;
}

grid-subcolumn($grid, $l, $colspan = 1, $indent = 0) {
	grid-column($grid, $l, $colspan, $indent);

	// to account for containing column
	position: relative;
	left: -($grid.gutter);
}

grid-subcontainer($grid, $l, $colspan = 1, $indent = 0) {
	grid-column($grid, $l, $colspan, $indent);

	// to override grid-column()
	padding-left:  @padding-left  - $grid.gutter;
	padding-right: @padding-right - $grid.gutter;
}

