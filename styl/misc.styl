/* $Id$ */

/* TODO: gradients for backgrounds */
/* TODO: rounded corners */

$tabsize ?= 4;

clearfix() {
	&:after {
		content: "";
		display: table;
		clear:   both;
	}
}

opacity($o = 100%) {
	/* TODO: */
//	zoom: 1;
//	filter: alpha(opacity=30);
	opacity: 0.3;
}

shadow($h, $v, $b, $s, $c = #000) {
	-moz-box-shadow:    $h $v $b $s $c;
	-webkit-box-shadow: $h $v $b $s $c;
	box-shadow:         $h $v $b $s $c;
}

background-size($size) {
	-webkit-background-size: $size;
	-moz-background-size:    $size;
	-o-background-size:      $size;
	background-size:         $size;
}

box-sizing($s = content-box) {
	-webkit-box-sizing: $s; /* Safari/Chrome, other WebKit */
	-moz-box-sizing:    $s; /* Firefox, other Gecko */
	box-sizing:         $s; /* Opera/IE 8+ */
}

tab-size($t = 4) {
	-moz-tab-size: $t;
	-o-tab-size:   $t;
	tab-size:      $t;
}

border-radius($args...) {
	-webkit-border-radius: $args;
	-moz-border-radius:    $args;
	border-radius:         $args;
}

transition($args...) {
	-webkit-transition: $args;
	-moz-transition:    $args;
	transition:         $args;
}

column-count($n) {
	-webkit-column-count: $n;
	-moz-column-count:    $n;
	column-count:         $n;
}

column-gap($size) {
	-webkit-column-gap: $size;
	-moz-column-gap: $size;
	column-gap: $size;
}

column-rule-style($style) {
	-webkit-column-rule-style: $style;
	-moz-column-rule-style:    $style;
	column-rule-style:         $style;
}

column-rule-width($size) {
	-webkit-column-rule-width: $size;
	-moz-column-rule-width:    $size;
	column-rule-width:         $size;
}

column-rule-color($colour) {
	-webkit-column-rule-color: $colour;
	-moz-column-rule-color:    $colour;
	column-rule-color:         $colour;
}

column-rule($args...) {
	-webkit-column-rule: $args;
	-moz-column-rule:    $args;
	column-rule:         $args;
}

column-fill($fill) {
	-moz-column-fill: $fill;
	column-fill:      $fill;
}

font-feature-settings($f, $o) {
	/*
	 * Note if @-webkit-font-feature-settings here because
	 * just @font-feature-settings would be this mixin itself.
	 */
	if @-webkit-font-feature-settings {
		-moz-font-feature-settings:    @-moz-font-feature-settings,    $f $o;
		-moz-font-feature-settings:    @-moz-font-feature-settings,    $f + "=" + $o;
		-ms-font-feature-settings:     @-ms-font-feature-settings,     $f $o;
		-o-font-feature-settings:      @-o-font-feature-settings,      $f $o;
		-webkit-font-feature-settings: @-webkit-font-feature-settings, $f $o;
		font-feature-settings:         @font-feature-settings,         $f $o;
	} else {
		-moz-font-feature-settings:    $f $o;
		-moz-font-feature-settings:    $f + "=" + $o;
		-ms-font-feature-settings:     $f $o;
		-o-font-feature-settings:      $f $o;
		-webkit-font-feature-settings: $f $o;
		font-feature-settings:         $f $o;
	}
}

font-face($family, $weight, $style, $basename, $svg) {
	@font-face {
		font-family: $family;
		font-weight: $weight;
		font-style:  $style;

		src: url($basename + '.eot');
		src: url($basename + '.eot?#iefix') format('embedded-opentype'),
		     url($basename + '.woff')       format('woff'),
		     url($basename + '.ttf')        format('truetype'),
		     url($basename + '.svg' + $svg) format('svg');
	}
}

midpoint($c) {
	r = 0; r += red(n)   for n in $c; r /= length($c)
	g = 0; g += green(n) for n in $c; g /= length($c)
	b = 0; b += blue(n)  for n in $c; b /= length($c)
	a = 0; a += alpha(n) for n in $c; a /= length($c)

	rgb(r, g, b, a);
}

