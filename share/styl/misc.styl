/* $Id$ */

/* TODO: gradients for backgrounds */
/* TODO: rounded corners */

$tabsize ?= 4;

clearfix() {
	&:after {
		content: "";
		display: table;
		clear:   both;
	}
}

opacity($o = 1.0) {
	if (unit($o) == '%' || $o < 0 || $o > 1) {
		error('opacity 0..1');
	}

	filter: unquote('progid:DXImageTransform.Microsoft.Alpha(Opacity=' + round($o * 100) + ')')
	zoom: 1;
	filter: unquote('alpha(opacity=' + round($o * 100) + ')');
	opacity: $o;
}

/*
 * Data URIs.
 * See http://codepen.io/Tigt/post/optimizing-svgs-in-data-uris
 */
data-uri($data, $mime = 'image/svg+xml', $charset = 'utf8') {
	// TODO: I would prefer to do URL encoding here, in Stylus
	s('url("data:%s;charset=%s,%s")',
		unquote($mime), unquote($charset), unquote($data));
}

filter($name, $n = 100%) {
	if ($n < 0% || $n > 100%) {
		error('filter 0..100%')
	}

	$u = unit($n, '') / 100;

	if ($name == 'grayscale') {
		$svg = s(                      \
		  "<svg xmlns='%s'>"           \
		+ " <filter id='%s'>"          \
		+ "  <feColorMatrix type='%s'" \
		+ "   values='%s %s %s 0 0 "   \
		+            "%s %s %s 0 0 "   \
		+            "%s %s %s 0 0 "   \
		+            " 0  0  0 1 0'/>" \
		+ " </filter>"                 \
		+ "</svg>"                     \
		+ "#%s",                       \
			unquote('http://www.w3.org/2000/svg'), \
			unquote($name),    \
			unquote('matrix'), \
			$u, $u, $u,        \
			$u, $u, $u,        \
			$u, $u, $u,        \
			unquote($name));
		// XXX: technically ought to urlencode more here;
		// see http://codepen.io/Tigt/post/optimizing-svgs-in-data-uris
		filter: data-uri($svg);
	}

	if ($name == 'none') {
		-webkit-filter: none;
		   -moz-filter: none;
			-ms-filter: none;
			 -o-filter: none;
				filter: none;
	} else {
		-webkit-filter: s('%s(%s)', unquote($name), $u);
		   -moz-filter: s('%s(%s)', unquote($name), $u);
			-ms-filter: s('%s(%s)', unquote($name), $u);
			 -o-filter: s('%s(%s)', unquote($name), $u);
		if ($name == 'grayscale') {
				filter: unquote('gray');
		}
				filter: s('%s(%s)', unquote($name), $u);
	}
}

font-feature-settings($f, $o) {
	/*
	 * Note if @-webkit-font-feature-settings here because
	 * just @font-feature-settings would be this mixin itself.
	 */
	if @-webkit-font-feature-settings {
		-moz-font-feature-settings:    @-moz-font-feature-settings,    $f $o;
		-moz-font-feature-settings:    @-moz-font-feature-settings,    $f + "=" + $o;
		-ms-font-feature-settings:     @-ms-font-feature-settings,     $f $o;
		-o-font-feature-settings:      @-o-font-feature-settings,      $f $o;
		-webkit-font-feature-settings: @-webkit-font-feature-settings, $f $o;
		font-feature-settings:         @font-feature-settings,         $f $o;
	} else {
		-moz-font-feature-settings:    $f $o;
		-moz-font-feature-settings:    $f + "=" + $o;
		-ms-font-feature-settings:     $f $o;
		-o-font-feature-settings:      $f $o;
		-webkit-font-feature-settings: $f $o;
		font-feature-settings:         $f $o;
	}
}

font-face($family, $weight, $style, $basename, $svg) {
	@font-face {
		font-family: $family;
		font-weight: $weight;
		font-style:  $style;

		src: url($basename + '.eot');
		src: url($basename + '.eot?#iefix') format('embedded-opentype'),
		     url($basename + '.woff')       format('woff'),
		     url($basename + '.ttf')        format('truetype'),
		     url($basename + '.svg' + $svg) format('svg');
	}
}

midpoint($c) {
	r = 0; r += red(n)   for n in $c; r /= length($c)
	g = 0; g += green(n) for n in $c; g /= length($c)
	b = 0; b += blue(n)  for n in $c; b /= length($c)
	a = 0; a += alpha(n) for n in $c; a /= length($c)

	rgb(r, g, b, a);
}

