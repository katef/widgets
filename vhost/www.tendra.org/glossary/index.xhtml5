<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<!-- TODO: pass for URLs -->
<!-- TODO: pass for abbrs etc -->
<!-- TODO: these all need # anchors per term -->

<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<title><abbr title="Glossary of Terms">Glossary</abbr></title>

		<meta name="description" content="Glossary of Terms"/>
		<meta name="keywords"    content="Glossary, terms, definitions, meanings, acronyms"/>
		<meta name="rcsid"       content="$Id$"/>
		<meta name="layout"      content="docs"/>
	</head>

	<body>
		<!-- TODO: automatically generate this, from wrapper xslt -->
		<ol class="glossary">
			<li><a href="#A">A</a></li>
			<li><a href="#B">B</a></li>
			<li><a href="#C">C</a></li>
			<li><a href="#D">D</a></li>
			<li>E</li>
			<li><a href="#F">F</a></li>
			<li>G</li>
			<li>H</li>
			<li><a href="#I">I</a></li>
			<li>J</li>
			<li>K</li>
			<li><a href="#L">L</a></li>
			<li><a href="#M">M</a></li>
			<li>N</li>
			<li><a href="#O">O</a></li>
			<li><a href="#P">P</a></li>
			<li>Q</li>
			<li><a href="#R">R</a></li>
			<li><a href="#S">S</a></li>
			<li><a href="#T">T</a></li>
			<li><a href="#U">U</a></li>
			<li>V</li>
			<li>W</li>
			<li>X</li>
			<li>Y</li>
			<li>Z</li>
		</ol>

		<a name="A"/>

		<dl class="glossary">
			<dt><dfn>ANDF</dfn></dt>

			<dd class="abbr">Architecture Neutral Distribution format</dd>
			<dd>The format standardised by
				<a rel="external" href="http://www.opengroup.org/">the Open Group</a> (formerly OSF),
				for which TDF was selected.</dd>

			<dt><dfn>API</dfn></dt>
			<dd>TODO</dd>
		</dl>

		<a name="B"/>

		<dl class="glossary">
			<dt><dfn>bmake</dfn></dt>
			<dd>A portable version of NetBSD's <code>make</code>.
			See <a rel="external" href="http://www.crufty.net/help/sjg/bmake.htm"> http://www.crufty.net/help/sjg/bmake.html</a>.</dd>
		</dl>

		<a name="C"/>

		<dl class="glossary">
			<dt><dfn>Calculus</dfn></dt>
			<dd>calculus is an algebraic <a href="#TODO">type system</a> tool,
				for managing complex C type systems.
				It uses the TenDRA API checking techniques to enforce strong
				type checking and type encapsulation, and provides generic
				container types for lists, vectors etc.</dd>

			<dt><dfn>Capsule</dfn></dt>
			<dd>TODO</dd>

			<dt><dfn>CRT</dfn></dt>

			<dd class="abbr">C runtime</dd>
			<dd>TODO</dd>
		</dl>

		<a name="D"/>

		<dl class="glossary">
<!-- TODO: just for /history maybe
			<dt><dfn>DERA</dfn></dt>

			<dd class="abbr">Defence Research and Evaluation Agency
				<span class="note">(ne√© DRA, now DSTL and QinetiQ)</span></dd>
			<dd>TODO</dd>
-->

			<dt><dfn>disp</dfn></dt>
			<dd>
				<p>disp is the TDF pretty printer.
					It translates the bitstream comprising a TDF capsule into a
					human readable form.</p>

				<p>This functionality is provided by tcc, but disp may be
					called directly.</p>
			</dd>
		</dl>

		<a name="F"/>

		<dl class="glossary">
			<dt><dfn>Flex</dfn></dt>
			<!-- TODO: link to wikipedia for things like that -->
			<dd>
				<p>A <a href="#">capability architecture</a>
					and operating system developed at DERA during the 1980s.</p>

				<p>Not to be confused with the popular
					<a rel="external" href="http://flex.sourceforge.net/">lexical analyzer of
						the same name</a>.</p>
			</dd>
		</dl>

		<a name="I"/>

		<dl class="glossary">
			<dt><dfn>Installer</dfn></dt>
			<dd>TODO</dd>
		</dl>

		<a name="L"/>

		<dl class="glossary">
			<dt><dfn>LALR</dfn></dt>

			<dd class="abbr">Left-Associative Left-to-right, Rightmost-derivation parser</dd>
			<dd>A subset of LR parsers.</dd>
			<!-- TODO: link to wikipedia for things like that -->

			<dt><dfn>Lexer</dfn></dt>
			<dd>TODO</dd>

			<dt><dfn>lexi</dfn></dt>
			<dd>TODO</dd>

			<dt><dfn>LL(1)</dfn></dt>
			<dd>Left-to-right, Leftmost-derivation parser with lookahead of 1 token.</dd>

			<dt><dfn>Low-level Ten15</dfn></dt>
			<dd>
				<p>The format that later became known as TDF.</p>

				<p>To make porting the Ten15 System easier, after type checking
					had succeeded and machine-independent optimisations made,
					the untyped output of the Ten15 compiler was provided:
					this became defined as Low-level Ten15.</p>

				<p>Low-level Ten15, being untyped, was a viable target for
					<a href="#TODO">weakly-typed languages</a>, including C.</p>

				<p>At the OSF's request for technologies for ANDF, Low-level
					Ten15 was renamed to TDF (Ten15 Distribution Format), and
					put forward as a (successful) proposal.</p>
			</dd>
		</dl>

		<a name="M"/>

		<dl class="glossary">
			<dt><dfn>Machine</dfn></dt>
			<dd>TODO</dd>

			<dt><dfn>make_err</dfn></dt>
			<dd>TODO</dd>

			<dt><dfn>make_tdf</dfn></dt>
			<dd>make_tdf is a tool for generating TDF decoders and encoders.
				It takes a compact description of the TDF specification and a
				template file, and generates code to read, write or transform
				a TDF capsule.</dd>
		</dl>

		<a name="O"/>

		<dl class="glossary">
			<dt><dfn>Object</dfn></dt>
			<dd>TODO</dd>

			<dt><dfn>OSF</dfn></dt>
			<dd class="abbr">Open Software Foundation</dd>
			<dd>TODO</dd>

			<dt><dfn>OSSG</dfn></dt>
			<dd>Open Source Specialist Group</dd>
			<dd>TODO: http://ossg.bcs.org/</dd>
		</dl>

		<a name="P"/>

		<dl class="glossary">
			<dt><dfn>Porting</dfn></dt>
			<dd>TODO</dd>

			<dt><dfn>PL_TDF</dfn></dt>
			<dd>TODO</dd>

			<dt><dfn>Producer</dfn></dt>
			<dd>TODO</dd>
		</dl>

		<a name="R"/>

		<dl class="glossary">
			<dt><dfn>RTTI</dfn></dt>
			<dd class="abbr">Run-Time Type Identification</dd>
			<dd>The standard C++ mechanism for class objects to identify their
				dynamic or run-time types.</dd>
		</dl>

		<a name="S"/>

		<dl class="glossary">
			<dt><dfn>SID</dfn></dt>
			<dd class="abbr">Syntax Improving Device</dd>
			<dd>SID is an <a href="#TODO">LL(1)</a> <a href="#TODO">parser generator</a>
				with a long history (the original version dates back to the mid-sixties!).
				As well as the normal rule transformations it provides powerful
				techniques for call-outs in circumstances where a non-trivial
				look-ahead is required (essential for languages like C++),
				and for error recovery.</dd>

			<dt><dfn>Sort</dfn></dt>
			<dd>TODO</dd>

			<dt><dfn>Start-up File <span class="note">(TCC modes)</span></dfn></dt>
			<!-- TODO: there are two of these -->
			<dd>TODO</dd>

			<dt><dfn>Start-up File <span class="note">(C producer arguments)</span></dfn></dt>
			<!-- TODO: there are two of these -->
			<dd>TODO</dd>

			<dt><dfn>Structured TDF</dfn></dt>
			<dd>TODO</dd>
		</dl>

		<a name="T"/>

		<dl class="glossary">
			<dt><dfn>tcc</dfn></dt>
			<dd>TODO</dd>

			<dt><dfn>TDF</dfn></dt>
			<dd class="abbr">TenDRA Distribution Format</dd>
			<dd>TODO</dd>

			<dt><dfn>TDF Capsule</dfn></dt>
			<dd>TODO</dd>

			<dt><dfn>TDF Notation</dfn></dt>
			<dd>TODO</dd>

			<dt><dfn>TDF Notation Compiler</dfn></dt>
			<dd>TODO</dd>

			<dt><dfn>Ten15 language, the</dfn></dt>
			<dd>The Ten15 language (usually called Ten15 Notation) was the main
				language used to program the Ten15 system; it was created to
				provide all of the virtual machine's abilities.</dd>

			<dt><dfn>Ten15 Notation</dfn></dt>
			<dd>See The Ten15 language.</dd>

			<dt><dfn>Ten15 system, the</dfn></dt>
			<dd>
				<p>This was a capability architecture which was created as an
					equivalent to the Flex capability architecture for the
					microcomputer, intended to make the work on Flex available
					to modern machines lacking a microcode facility.</p>

				<p>Ten15 provided this by way of a <a href="#TODO">strongly typed</a>
					virtual machine. This differed from other virtual machines of
					the time by making use of JIT (then yet to be named).</p>

				<p>This machine acted as an abstract superset of several
					high-level languages, and was intended to express these
					(in much the same way as Microsoft's .Net virtual machine
					expresses several languages today).</p>

				<p>Conspicuously, C was not supported as it is not strongly typed.
					This was eventually provided for by TDF, instead.</p>
			</dd>

			<dt><dfn>Ten15 <abbr title="Intermediate Representation">IR</abbr>, the</dfn></dt>
			<dd>TODO</dd>

			<dt><dfn>ten15.org</dfn></dt>
			<dd>TODO</dd>

			<dt><dfn>tendra.org</dfn></dt>
			<dd>The home for this project.</dd>

			<dt><dfn>tld</dfn></dt>
			<dd>
				<p>tld is the TDF linker. It combines a number of TDF capsules into a
					single capsule. It also can be used to create and manipulate
					libraries of TDF capsules.</p>

				<p>This functionality is provided by tcc, but tld may be called directly.</p>
			</dd>

			<dt><dfn>tnc</dfn></dt>
			<dd>TODO</dd>

			<dt><dfn>tpl</dfn></dt>
			<dd>
				<p>tpl is the PL_TDF compiler. It is a TDF
					<q>structured assembler</q> in the lineage of PL360.
					tpl provides a more user-friendly way of generating TDF
					capsules from scratch than that offered by tnc.</p>

				<p>This functionality is provided by tcc, but tpl may be called
					directly.</p>
			</dd>

			<dt><dfn>tspec</dfn></dt>
			<dd>
				<p>The API checking facilities of the TenDRA compiler are
					implemented by means of abstract interface specifications
					generated using the tspec tool.</p>

				<p>This tool and specifications for a number of common APIs are
					included with the release. Part of the installation process
					consists of pre-compiling the implementations of those APIs
					implemented on the target machine into TDF libraries.
					This is performed automatically using tcc to combine the
					tspec specification with the implementation given in the
					system headers.</p>
			</dd>
		</dl>

		<a name="U"/>

		<dl class="glossary">
			<dt><dfn>Unstructured TDF</dfn></dt>
			<dd>TODO</dd>

			<dt><dfn>Unit</dfn></dt>
			<dd>TODO</dd>
		</dl>


		<br/>

		<p>If you have a term which is not defined here, please do
			<a rel="contact" href="#TODO">contact</a> me.</p>
	</body>
</html>

