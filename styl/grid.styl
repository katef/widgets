/* $Id$ */

/*
 * This grid system has the principle that columns are imagined to be a fixed width,
 * that width determines how many columns maximum would fix into the current media.
 *
 * The idea is that designers design layouts to suit various numbers of columns.
 *
 * Responsive design is provided by selecting between those layouts as the media
 * width changes. Any given layout may be either fluid or fixed-width.
 *
 * Anatomy of a layout:
 *
 *   ├─────────────────────────── parent ────────────────────────┤
 *   ╎    ├──────────────────── container ───────────────────┤   ╎
 *   │    ╎            ├┤ gutter                             ╎   │
 *   │    ░░▒▒▒▒▒▒▒▒▒░░░░▒▒▒▒▒▒▒▒▒░░░░▒▒▒▒▒▒▒▒▒░░░░▒▒▒▒▒▒▒▒▒░░   │
 *   │    ░░▒▒▒▒▒▒▒▒▒░░░░▒▒▒▒▒▒▒▒▒░░░░▒▒▒▒▒▒▒▒▒░░░░▒▒▒▒▒▒▒▒▒░░   │
 *   │    ░░▒▒▒▒▒▒▒▒▒░░░░▒▒▒▒▒▒▒▒▒░░░░▒▒▒▒▒▒▒▒▒░░░░▒▒▒▒▒▒▒▒▒░░   │
 *   │    ░░▒▒▒▒▒▒▒▒▒░░░░▒▒▒▒▒▒▒▒▒░░░░▒▒▒▒▒▒▒▒▒░░░░▒▒▒▒▒▒▒▒▒░░   │
 *   ╎   ╎             ├───────────┤ column                      │
 *   ├───┤ margin                                                │
 *
 * There are also sub-containers, which are columns containing other columns.
 * Those make life easier for heirachical markup.
 *
 * Per-layout variables:
 *
 *   $ncols  [$l]  Number of columns for layout $l
 *   $layouts[$l]  Column strategy for layout $l (fixed or fluid)
 *   $aligns [$l]  Alignment for layout $l (left, right or center)
 *
 * Global variables:
 *
 *   $colwidth     Column width for fixed layouts
 *   $gutter       Half the width between adjacent columns
 *   $*-margin     Container margin for fixed- and fluid- layouts respectively
 *
 * $colwidth is used to decide if a layout will fit in the container,
 * regardless of whether that layout happens to be fluid or fixed.
 *
 * Units for $colwidth must be suitable for @media min-width (i.e. px or pt, but
 * not em or ex). Units here must match the units for $fixed-margin and $gutter.
 *
 *
 * There are no pre-defined CSS classes to scatter over your markup. Instead, you're
 * expected to call the grid mixins for your relevant elements, for each of the layouts
 * you define.
 *
 * Example:
 *
 *  $ncols   ?= (     1      2      3      4      6      8     10     12     14     16  );
 *  $layouts ?= ( fluid  fluid  fluid  fluid  fixed  fixed  fixed  fixed  fixed  fixed  );
 *  $aligns  ?= ( center center center center center center center center center center );
 *
 *  $colwidth ?= 100px;
 *  $gutter   ?= 18px;
 *
 *  $fixed-margin ?= $gutter * 3; // must be same units as $colwidth
 *  $fluid-margin ?= $gutter;     // must be same units as $colwidth
 *
 *  $grid = $ncols $layouts $aligns $colwidth $gutter $fixed-margin $fluid-margin;
 *
 *  for $l in 0 .. length($ncols) - 1 {
 *  	$q = grid-breakpoint($grid, $l, min);
 *  	@media $q {
 *  		ol {
 *  			grid-container($grid, $l);
 *  		}
 *
 *  		li {
 *  			grid-column($grid, $l);
 *  		}
 *  	}
 *  }
 *
 * Unfortunately I can't hide this stuff inside mixins because Stylus has various bugs
 * in its @media handling. So the loop for breakpoints has to be provided by the user.
 * Sorry about that. I've done my best to minimize the guts exposed.
 *
 * You can have completely different layouts, if you wish. For example, by using
 * conditionals inside the media queries:
 *
 *  for $l in 0 .. length($ncols) - 1 {
 *  	$q = grid-breakpoint($grid, $l, min);
 *  	@media $q {
 *  		if ($ncols[$l] == 1) {
 *  			...
 *  		}
 *  
 *  		if ($ncols[$l] >= 2) {
 *  			...
 *  		}
 *  	}
 *  }
 *
 */

/*
 * TODO: have an element be both a container and a column
 * TODO: permit $gutter to be a percentage
 * TODO: permit $colspan to be a percentage
 */

@import "misc.styl";

grid-breakpoint-min($grid, $l) {
	$ncols        = $grid[0];
	$layouts      = $grid[1];
	$colwidth     = $grid[3];
	$fixed-margin = $grid[5];

	if ($l == 0) {
		return null;
	} else {
		return 2 * $fixed-margin + $ncols[$l] * $colwidth;
	}
}

grid-breakpoint-max($grid, $l) {
	$ncols        = $grid[0];
	$layouts      = $grid[1];
	$colwidth     = $grid[3];
	$fixed-margin = $grid[5];

	if ($l == length($ncols) - 1) {
		return null;
	} else {
		return 2 * $fixed-margin + $ncols[$l + 1] * $colwidth - 1;
	}
}

grid-breakpoint($grid, $l, $m) {
	$ncols        = $grid[0];
	$layouts      = $grid[1];

	/*
 	 * TODO: permitting $fixed-margin as a percentage shouldn't be so hard.
	 * I think it's just 1/percent and not a simultaneous equation.
	 */

	if ($m == min) {
		$width = grid-breakpoint-min($grid, $l);
	} else {
		$width = grid-breakpoint-max($grid, $l);
	}

	if (!$width) {
		return all;
	}

//	p("%s cols: %s = %s, %s" % ($ncols[$l] $m $width $layouts[$l]));

	return "(%s-width: %s)" % ($m $width);
}

grid-container($grid, $l) {
	$ncols        = $grid[0];
	$layouts      = $grid[1];
	$aligns       = $grid[2];
	$colwidth     = $grid[3];
	$gutter       = $grid[4];
	$fixed-margin = $grid[5];
	$fluid-margin = $grid[6];

	clearfix();

	if ($layouts[$l] == fixed) {
		width: $ncols[$l] * $colwidth;
	} else {
		width: auto;
	}

	if ($layouts[$l] == fixed) {
		margin-left:  $aligns[$l] == left  ? $fixed-margin : auto;
		margin-right: $aligns[$l] == right ? $fixed-margin : auto;
	} else {
		margin-left:  $aligns[$l] != right ? $fluid-margin : 0;
		margin-right: $aligns[$l] != left  ? $fluid-margin : 0;
	}

	padding-left:  $gutter;
	padding-right: $gutter;
}

grid-subgrid($grid, $l, $indent) {
	$subgrid = clone($grid);
	$subgrid[0][$l] = $subgrid[0][$l] - $indent;

	return $subgrid;
}

grid-column($grid, $l, $colspan = 1, $indent = 0) {
	$ncols        = $grid[0];
	$layouts      = $grid[1];
	$colwidth     = $grid[3];
	$gutter       = $grid[4];

	float: left;

	/* TODO: need to work around sub-pixel percentage bugs
	 * (e.g. overflow: hidden, and set container to 101%) */

	if ($layouts[$l] == fixed) {
		width: $colspan * $colwidth;
	} else {
		width: ($colspan * 100% / $ncols[$l]);
	}

	box-sizing: border-box;

	/* XXX: only if not already set (e.g. for an element being both a column and a container) */
	padding-left:  0;
	padding-right: 0;
	margin-left:   0;
	margin-right:  0;

	if ($layouts[$l] == fixed) {
		margin-left: $indent * $colwidth;
	} else {
		margin-left: $indent * (100% / $ncols[$l]);
	}

	padding-left:  @padding-left  + $gutter;
	padding-right: @padding-right + $gutter;
}

grid-subcontainer($grid, $l, $colspan = 1, $indent = 0) {
	$gutter       = $grid[4];

	grid-column($grid, $l, $colspan, $indent);

	// to override grid-column()
	padding-left:  @padding-left  - $gutter;
	padding-right: @padding-right - $gutter;
}

