<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
	<head>
		<title>Kate&rsquo;s Web Widgets &mdash; Dotted Contents Menus</title>
		<link rel="stylesheet" href="../../kate.css"/>
		<link rel="stylesheet" href="../../article.css"/>
		<meta name="description" content="How to implement dotted contents listings in CSS, and why it's a bad idea."/>
		<meta name="keywords" content="kate,amazing,css,tutorial,guide,overview,menus,dotted,dots,listing,contents,index"/>
	</head>

	<body>
	<h1 id="title">Kate&rsquo;s Web Widgets &mdash; Dotted Contents</h1>
	<!--#include virtual="../../contents.inc"-->

	<div id="main">

	<style>
	ol { margin-right: 0; padding-right: 0; border-right: solid 6em transparent; }
	</style>

	<p>Hi there internet citizens. Today we are going to be looking at implementing
		dotted contents listings in <acronym title="Cascading Style Sheets">CSS</acronym>!</p>

	<p>The purpose of this is to produce dotted leaders without resorting to
		visually-inconsistent things such as images, or using borders. These
		dots are real &lsquo;.&rsquo; characters. Here they are, and if they
		don't look right in your browser, scroll right down to the bottom...</p>

	<ol class="a">
		<li>
			<a href="#">1</a>
			<span>Animals</span>
		</li>
		<li>
			<a href="#">1.1</a>
			<span>Gorillas</span>
		</li>
		<li>
			<a href="#">1.2</a>
			<span>Fish</span>
		</li>
		<li>
			<a href="#">1.2.1</a>
			<span>Big Fish</span>
		</li>
		<li>
			<a href="#">1.2.3</a>
			<span>Bigger Fish</span>
		</li>
		<li>
			<a href="#">1.2.4</a>
			<span>Fish that are Too Big</span>
		</li>
		<li>
			<a href="#">1.3</a>
			<span>Small Off-Duty Czechoslovakian Traffic Wardens</span>
		</li>
		<li>
			<a href="#">2</a>
			<span>Vegetables</span>
		</li>
		<li>
			<a href="#">2.1</a>
			<span>Green Ones</span>
		</li>
		<li>
			<a href="#">2.2</a>
			<span>Orange Ones</span>
		</li>
		<li>
			<a href="#">2.3</a>
			<span>Potatos</span>
		</li>
	</ol>

	<hr/>

	<p>Firstly, I would like to point out that I am somewhat uncertain if this this is
	ever entirely suitable for use on web pages, as typographically it does not seem
	appropiate at all.
	With that in mind, let us continue! on to the markup for a
	simple listing item:</p>

	<pre>&lt;ol&gt;
	&lt;li&gt;
		&lt;a href="#"&gt;#&lt;/a&gt;
		&lt;span&gt;Section Title&lt;/span&gt;
	&lt;/li&gt;
&lt;/ol&gt;</pre>

	<p>Please note here that <em><code>#</code> represents a section number</em> and not
		a page number. Page numbers don't make sense on the web: arguably they should not
		be used in printed documents, either.</p>

	<p>You will notice that this data is fundmentally tree-shaped. Yes, indeed, you should
		probably be implementing this as a tree.
		<acronym title="Extensible Hypertext Markup language">XHTML</acronym> provides a mechanism
		to nest lists for exactly this purpose; I will not be using a work-around intermediate
		of nesting <code>&lt;ol&gt;</code> elements in <acronym title="Hypertext Markup Language">HTML</acronym>.
		You may do so, if you wish, however as I'm focusing on the <acronym title="Cascading Style Sheets">CSS</acronym>
		here, I'm quite happy to leave this as a flat list of <code>&lt;li&gt;</code> elements
		within a single <code>&lt;ol&gt;</code>.</p>

	<p>For reference, here's our element without positional styling. I've shaded in
		the various elements so that their size and shape can be seen; I'll stick to the
		same shades for further examples.</p>

	<style>
		ol.b, ol.c, ol.d { background-color: #eee; }
		ol.b li, ol.c li, ol.d li { background-color: #ddd; color: #888; }
		ol.b span, ol.c span, ol.d span { background-color: #ccc; color: #888; }
		ol.b a, ol.c a, ol.d a { background-color: #bbb; color: #888; }
	</style>

	<ol class="b">
		<li>
			<a href="#">#</a>
			<span>Section Title</span>
		</li>
	</ol>

	<p>Now, to get everything on one line and in the right place:</p>

	<style>
		ol.c, ol.d { list-style-type: none; }
		ol.c a, ol.d a { float: right; }
		ol.c li, ol.d li { white-space: nowrap; }
	</style>

	<pre>ol	{ list-style-type: none; }
ol a	{ float: right;          }</pre>

	<ol class="c">
		<li>
			<a href="#">#</a>
			<span>Section Title</span>
		</li>
	</ol>

	<p>That <code>position: relative</code> is to ensure the
		<code>&lt;a&gt;</code> element has a Z-index. We'll need
		that in a moment, so we can set a background colour to
		obscure the dots beneath it.</p>

	<p>Next, to add those dots:</p>

	<pre>ol	         { overflow: hidden;              }
ol.d span:after { margin-left: 1ex;
		  content: "......."; /* lots */ }</pre>

	<style>
	ol.d { overflow: hidden; }
	ol.d li { white-space: nowrap; }
	ol.d span:after { margin-left: 1ex;
		content: ".......................................................................................................................................................................................................................................................................................................................................................................................................";
	}
	ol.d a { -moz-opacity: 0.5; background-color: #999; color: #444; }
	</style>

	<ol class="d">
		<li>
			<a href="#">#</a>
			<span>Section Title</span>
		</li>
	</ol>

	<p>Oh dear, this is awful! We need to ensure there are enough dots to fill the width,
		so we end up typing lots, and clipping the overflow. But this means the dots go across
		under the <code>&lt;a&gt;</code> element, and so we'll have to give that a background
		colour to hide it.</p>

	<p>Because we want to cover the dots, the <code>&lt;a&gt;</code>
		element needs to have a Z-index. One quick way to do this, is
		to set <code>position: relative</code>, so we'll do that in a moment.
		We'll also want some padding, to give a little space after the dots to
		correspond to the margin on the left.</p>

	<p>Now, those dots are shoving the span tag to the left, so we need a
		<code>white-space: nowrap</code> statement to ensure the section title is not broken.</p>

	<p>What's worse, is that some browsers (<acronym title="Internet Explorer">IE</acronym>?)
		don't even implement <code>content:</code>, so <em>those users will just see a big
		empty space</em>. You could work-around this by putting the dots in your
		markup, but then I'd have to hit you.</p>

	<p>Meanwhile, putting it all together, we have:</p>

	<style>
	ol.a { overflow: hidden; list-style-type: none; }
	ol.a li { white-space: nowrap; }

	ol.a a {
		background-color: white; float: right;
		padding-left: 1ex; position: relative;
	}

	ol.a span:after {
		margin-left: 1ex;
		content: ".......................................................................................................................................................................................................................................................................................................................................................................................................";
	}
	</style>

	<pre>ol		{ overflow: hidden; list-style-type: none; }
ol li		{ white-space: nowrap;                     }
ol a		{ background-color: white; float: right;
		  padding-left: 1ex; position: relative;   }
ol span:after	{ margin-left: 1ex; content: "........";   } /* spot the hack */</pre>

	<ol class="a">
		<li>
			<a href="#">#</a>
			<span>Section Title</span>
		</li>
	</ol>

	<p>And that's it. What a mess!
	<em>Please don't use this in your websites.</em> The purpose of this article is
	to demonstrate how horrible it is.</p>

	</div>

	<hr class="footer"/>

	<p><code>$Id: index.sxhtml 441 2009-05-17 11:10:46Z kate $</code></p>

	</body>
</html>

